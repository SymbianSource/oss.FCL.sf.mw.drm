/*
* Copyright (c) 2008 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:  String Dictionary for OMA 2.1 Drm
*
*/


// Autogenerated from DrmRel2_1StringDict00TagTable.st by the stringtable tool - Do not edit
#include <e32std.h>
#include <stringpool.h>
#include <stringtablesupport.h>
#include "drmrel2_1stringdict00tagtable.h"
#ifdef _DEBUG
#undef _DEBUG
#endif

_STLIT8(K1, "roap:roapTrigger");
_STLIT8(K2, "roap:roapTrigger");
_STLIT8(K3, "roap:roapTrigger");
_STLIT8(K4, "roap:roapTrigger");
_STLIT8(K5, "registrationRequest");
_STLIT8(K6, "registrationRequest");
_STLIT8(K7, "registrationRequest");
_STLIT8(K8, "registrationRequest");
_STLIT8(K9, "roAcquisition");
_STLIT8(K10, "roAcquisition");
_STLIT8(K11, "roAcquisition");
_STLIT8(K12, "roAcquisition");
_STLIT8(K13, "joinDomain");
_STLIT8(K14, "joinDomain");
_STLIT8(K15, "joinDomain");
_STLIT8(K16, "joinDomain");
_STLIT8(K17, "leaveDomain");
_STLIT8(K18, "leaveDomain");
_STLIT8(K19, "leaveDomain");
_STLIT8(K20, "leaveDomain");
_STLIT8(K21, "signature");
_STLIT8(K22, "signature");
_STLIT8(K23, "signature");
_STLIT8(K24, "signature");
_STLIT8(K25, "encKey");
_STLIT8(K26, "encKey");
_STLIT8(K27, "encKey");
_STLIT8(K28, "encKey");
_STLIT8(K29, "riID");
_STLIT8(K30, "riID");
_STLIT8(K31, "riID");
_STLIT8(K32, "riID");
_STLIT8(K33, "riAlias");
_STLIT8(K34, "riAlias");
_STLIT8(K35, "riAlias");
_STLIT8(K36, "riAlias");
_STLIT8(K37, "nonce");
_STLIT8(K38, "nonce");
_STLIT8(K39, "nonce");
_STLIT8(K40, "nonce");
_STLIT8(K41, "roapURL");
_STLIT8(K42, "roapURL");
_STLIT8(K43, "roapURL");
_STLIT8(K44, "roapURL");
_STLIT8(K45, "domainID");
_STLIT8(K46, "domainID");
_STLIT8(K47, "domainID");
_STLIT8(K48, "domainID");
_STLIT8(K49, "domainAlias");
_STLIT8(K50, "domainAlias");
_STLIT8(K51, "domainAlias");
_STLIT8(K52, "domainAlias");
_STLIT8(K53, "roap:domainID");
_STLIT8(K54, "roap:domainID");
_STLIT8(K55, "roap:domainID");
_STLIT8(K56, "roap:domainID");
_STLIT8(K57, "roID");
_STLIT8(K58, "roID");
_STLIT8(K59, "roID");
_STLIT8(K60, "roID");
_STLIT8(K61, "roAlias");
_STLIT8(K62, "roAlias");
_STLIT8(K63, "roAlias");
_STLIT8(K64, "roAlias");
_STLIT8(K65, "contentID");
_STLIT8(K66, "contentID");
_STLIT8(K67, "contentID");
_STLIT8(K68, "contentID");
_STLIT8(K69, "roap:X509SPKIHash");
_STLIT8(K70, "roap:X509SPKIHash");
_STLIT8(K71, "roap:X509SPKIHash");
_STLIT8(K72, "roap:X509SPKIHash");
_STLIT8(K73, "keyIdentifier");
_STLIT8(K74, "keyIdentifier");
_STLIT8(K75, "keyIdentifier");
_STLIT8(K76, "keyIdentifier");
_STLIT8(K77, "hash");
_STLIT8(K78, "hash");
_STLIT8(K79, "hash");
_STLIT8(K80, "hash");
_STLIT8(K81, "ds:SignedInfo");
_STLIT8(K82, "ds:SignedInfo");
_STLIT8(K83, "ds:SignedInfo");
_STLIT8(K84, "ds:SignedInfo");
_STLIT8(K85, "ds:SignatureValue");
_STLIT8(K86, "ds:SignatureValue");
_STLIT8(K87, "ds:SignatureValue");
_STLIT8(K88, "ds:SignatureValue");
_STLIT8(K89, "ds:KeyInfo");
_STLIT8(K90, "ds:KeyInfo");
_STLIT8(K91, "ds:KeyInfo");
_STLIT8(K92, "ds:KeyInfo");
_STLIT8(K93, "ds:CanonicalizationMethod");
_STLIT8(K94, "ds:CanonicalizationMethod");
_STLIT8(K95, "ds:CanonicalizationMethod");
_STLIT8(K96, "ds:CanonicalizationMethod");
_STLIT8(K97, "ds:SignatureMethod");
_STLIT8(K98, "ds:SignatureMethod");
_STLIT8(K99, "ds:SignatureMethod");
_STLIT8(K100, "ds:SignatureMethod");
_STLIT8(K101, "ds:Reference");
_STLIT8(K102, "ds:Reference");
_STLIT8(K103, "ds:Reference");
_STLIT8(K104, "ds:Reference");
_STLIT8(K105, "ds:RetrievalMethod");
_STLIT8(K106, "ds:RetrievalMethod");
_STLIT8(K107, "ds:RetrievalMethod");
_STLIT8(K108, "ds:RetrievalMethod");
_STLIT8(K109, "ds:Transforms");
_STLIT8(K110, "ds:Transforms");
_STLIT8(K111, "ds:Transforms");
_STLIT8(K112, "ds:Transforms");
_STLIT8(K113, "ds:DigestMethod");
_STLIT8(K114, "ds:DigestMethod");
_STLIT8(K115, "ds:DigestMethod");
_STLIT8(K116, "ds:DigestMethod");
_STLIT8(K117, "ds:DigestValue");
_STLIT8(K118, "ds:DigestValue");
_STLIT8(K119, "ds:DigestValue");
_STLIT8(K120, "ds:DigestValue");
_STLIT8(K121, "ds:Transform");
_STLIT8(K122, "ds:Transform");
_STLIT8(K123, "ds:Transform");
_STLIT8(K124, "ds:Transform");
_STLIT8(K125, "xenc:EncryptionMethod");
_STLIT8(K126, "xenc:EncryptionMethod");
_STLIT8(K127, "xenc:EncryptionMethod");
_STLIT8(K128, "xenc:EncryptionMethod");
_STLIT8(K129, "xenc:CipherData");
_STLIT8(K130, "xenc:CipherData");
_STLIT8(K131, "xenc:CipherData");
_STLIT8(K132, "xenc:CipherData");
_STLIT8(K133, "xenc:CipherValue");
_STLIT8(K134, "xenc:CipherValue");
_STLIT8(K135, "xenc:CipherValue");
_STLIT8(K136, "xenc:CipherValue");
_STLIT8(K137, "extendedTrigger");
_STLIT8(K138, "extendedTrigger");
_STLIT8(K139, "extendedTrigger");
_STLIT8(K140, "extendedTrigger");
_STLIT8(K141, "trgLeaveDomain");
_STLIT8(K142, "trgLeaveDomain");
_STLIT8(K143, "trgLeaveDomain");
_STLIT8(K144, "trgLeaveDomain");
_STLIT8(K145, "deviceID");
_STLIT8(K146, "deviceID");
_STLIT8(K147, "deviceID");
_STLIT8(K148, "deviceID");
_STLIT8(K149, "-//OMA/DRM 2.1//EN");
_STLIT8(K150, "13~0");
_STLIT8(K151, "-//OMA/DRM 2.1//EN~0");

// Intermediate
const void * const KStringPointers[] =
	{
	(const void*)&K1,
	(const void*)&K2,
	(const void*)&K3,
	(const void*)&K4,
	(const void*)&K5,
	(const void*)&K6,
	(const void*)&K7,
	(const void*)&K8,
	(const void*)&K9,
	(const void*)&K10,
	(const void*)&K11,
	(const void*)&K12,
	(const void*)&K13,
	(const void*)&K14,
	(const void*)&K15,
	(const void*)&K16,
	(const void*)&K17,
	(const void*)&K18,
	(const void*)&K19,
	(const void*)&K20,
	(const void*)&K21,
	(const void*)&K22,
	(const void*)&K23,
	(const void*)&K24,
	(const void*)&K25,
	(const void*)&K26,
	(const void*)&K27,
	(const void*)&K28,
	(const void*)&K29,
	(const void*)&K30,
	(const void*)&K31,
	(const void*)&K32,
	(const void*)&K33,
	(const void*)&K34,
	(const void*)&K35,
	(const void*)&K36,
	(const void*)&K37,
	(const void*)&K38,
	(const void*)&K39,
	(const void*)&K40,
	(const void*)&K41,
	(const void*)&K42,
	(const void*)&K43,
	(const void*)&K44,
	(const void*)&K45,
	(const void*)&K46,
	(const void*)&K47,
	(const void*)&K48,
	(const void*)&K49,
	(const void*)&K50,
	(const void*)&K51,
	(const void*)&K52,
	(const void*)&K53,
	(const void*)&K54,
	(const void*)&K55,
	(const void*)&K56,
	(const void*)&K57,
	(const void*)&K58,
	(const void*)&K59,
	(const void*)&K60,
	(const void*)&K61,
	(const void*)&K62,
	(const void*)&K63,
	(const void*)&K64,
	(const void*)&K65,
	(const void*)&K66,
	(const void*)&K67,
	(const void*)&K68,
	(const void*)&K69,
	(const void*)&K70,
	(const void*)&K71,
	(const void*)&K72,
	(const void*)&K73,
	(const void*)&K74,
	(const void*)&K75,
	(const void*)&K76,
	(const void*)&K77,
	(const void*)&K78,
	(const void*)&K79,
	(const void*)&K80,
	(const void*)&K81,
	(const void*)&K82,
	(const void*)&K83,
	(const void*)&K84,
	(const void*)&K85,
	(const void*)&K86,
	(const void*)&K87,
	(const void*)&K88,
	(const void*)&K89,
	(const void*)&K90,
	(const void*)&K91,
	(const void*)&K92,
	(const void*)&K93,
	(const void*)&K94,
	(const void*)&K95,
	(const void*)&K96,
	(const void*)&K97,
	(const void*)&K98,
	(const void*)&K99,
	(const void*)&K100,
	(const void*)&K101,
	(const void*)&K102,
	(const void*)&K103,
	(const void*)&K104,
	(const void*)&K105,
	(const void*)&K106,
	(const void*)&K107,
	(const void*)&K108,
	(const void*)&K109,
	(const void*)&K110,
	(const void*)&K111,
	(const void*)&K112,
	(const void*)&K113,
	(const void*)&K114,
	(const void*)&K115,
	(const void*)&K116,
	(const void*)&K117,
	(const void*)&K118,
	(const void*)&K119,
	(const void*)&K120,
	(const void*)&K121,
	(const void*)&K122,
	(const void*)&K123,
	(const void*)&K124,
	(const void*)&K125,
	(const void*)&K126,
	(const void*)&K127,
	(const void*)&K128,
	(const void*)&K129,
	(const void*)&K130,
	(const void*)&K131,
	(const void*)&K132,
	(const void*)&K133,
	(const void*)&K134,
	(const void*)&K135,
	(const void*)&K136,
	(const void*)&K137,
	(const void*)&K138,
	(const void*)&K139,
	(const void*)&K140,
	(const void*)&K141,
	(const void*)&K142,
	(const void*)&K143,
	(const void*)&K144,
	(const void*)&K145,
	(const void*)&K146,
	(const void*)&K147,
	(const void*)&K148,
	(const void*)&K149,
	(const void*)&K150,
	(const void*)&K151
	};

const TStringTable DrmRel2_1StringDict00TagTable::Table = {151, KStringPointers, ETrue};
